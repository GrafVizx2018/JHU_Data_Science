rowSums(data)
x <- 1:4
p <- x/sum(x)
p <- x/sum(x)
p
temp
rownames(temp) <- c("X", "Prob")
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
1.0*0.1+2.0*0.2+3.0*0.3+4.0*0.4
iris <- iris
names(iris)
iris$count <- 1
library(plyr)
summary(iris$Petal.Width)
boundary
boundary <- c(0.1,0.5,1.5,2,2.5)
boundary
iris[iris$Petal.Width <= boundary[1]]
boundary[1]
iris$Petal.Width <= boundary[1]
iris[(iris$Petal.Width <= boundary[1]) == T]
iris[(iris$Petal.Width <= boundary[1]) == T,]
iris[iris$Petal.Width <= boundary[1] == T,]
iris[iris$Petal.Width <= boundary[1],]
iris[iris$Petal.Width <= boundary[1],]$group <- 1
iris$group <- 1
iris$group[iris$Petal.Width <= boundary[1],]$group <- 1
iris$group[iris$Petal.Width <= boundary[1],] <- 1
iris$group[iris$Petal.Width <= boundary[1]] <- 1
iris$group[(iris$Petal.Width > boundary[1])&(iris$Petal.Width <= boundary[2])] <- 2
iris$group[(iris$Petal.Width > boundary[2])&(iris$Petal.Width <= boundary[3])] <- 3
iris$group[(iris$Petal.Width > boundary[3])&(iris$Petal.Width <= boundary[4])] <- 4
View(iris)
ddply(iris, .(Species), summarise, steps=sum(count))
table <- ddply(iris, .(Species,group), summarise, steps=sum(count))
ddply(iris, .(Species,group), summarise, steps=sum(count))
table(iris$Species, iris$group)
table <- table(iris$Species, iris$group)
table(iris$Species, iris$group)
con <- as.data.frame(table(iris$Species, iris$group))
colSums(con)
View(con)
View(con)
names(con)
View(con)
con
con <- as.data.frame(table(iris$Species, iris$group))
con
con <-table(iris$Species, iris$group)
con
colSums(con)
rowsum <- rowSums(con)
colsum <- colSums(con)
rowsum
colsum
rowsum <- rowSums(con)
con[1,2]
probtable <- con
ptable <- con
pt[,1]
pt[:,1]
pt
ptable <- con
ptable[,1]
ptable[,1]/colsum[1]
for (i in 1:3){
ptable[,i] <- con[,i]/colsum[i]
}
ptable
con
qtable <- con
qtable[1,]
qtable[1,] - rowsum[1]
(qtable[1,] - rowsum[1])/rowsum[1]
(ptable[1,] - rowsum[1])/rowsum[1]
ptable
ptable <- con
for (i in 1:4){
ptable[,i] <- con[,i]/colsum[i]
}
ptable
for (i in 1:3){
qtable[i,] <- (ptable[i,]-rowsum[i])/rowsum[i]
}
qtable
df <- as.data.frame(qtable)
df
qtable
c(qtable[1,],qtable[2,],qtable[3,])
ftable <- con
ftable
ftable/150
ftable <- ftable/150
ftable <- ftable/150
ftable
ftable <- con
ftable <- ftable/150
ftable
colsum/150
colfreq <- colsum/150
rowfreq <- rowsum/150
etable <- con
etable
colfreq
rowfreq
etable <- con
for (i in 1:3){
for (j in 1:4){
etable[i,j] <- rowfreq[i]*colfreq[j]
}
}
etable
pertable <- con
for (i in 1:3){
for (j in 1:4){
pertable[i,j] <- (ftable[i,j]-etable[i,j])^2/etable[i,j]
}
}
pertable
c(pertable[1,],pertable[2,],pertable[3,])
c(qtable[1,],qtable[2,],qtable[3,])
iris <- read.table(file.choose())
View(iris)
iris$count <- 1
iris$group <- 1
summary(iris$V4)
boundary <- c(0.1,0.5,1.5,2,2.5)
boundary[1]
iris$group[iris$V4 <= boundary[1]] <- 1
iris$group[iris$V4 <= boundary[1]] <- 1
iris$group[(iris$V4 > boundary[1])&(iris$V4 <= boundary[2])] <- 2
iris$group[(iris$V4 > boundary[2])&(iris$V4 <= boundary[3])] <- 3
iris$group[(iris$V4 > boundary[3])&(iris$V4 <= boundary[4])] <- 4
iris <- read.table(file.choose())
iris$count <- 1
iris$group <- 1
summary(iris$V4)
boundary <- c(0.1,0.5,1.5,2,2.5)
iris$group[iris$V4 <= boundary[1]] <- 1
iris$group[(iris$V4 > boundary[1])&(iris$V4 <= boundary[2])] <- 2
iris$group[(iris$V4 > boundary[2])&(iris$V4 <= boundary[3])] <- 3
iris$group[(iris$V4 > boundary[3])&(iris$V4 <= boundary[4])] <- 4
con <-table(iris$V5, iris$group)
con
colsum <- colSums(con)
rowsum <- rowSums(con)
ptable <- con
for (i in 1:4){
ptable[,i] <- con[,i]/colsum[i]
}
ptable
qtable <- con
for (i in 1:3){
qtable[i,] <- (ptable[i,]-rowsum[i])/rowsum[i]
}
c(qtable[1,],qtable[2,],qtable[3,])
ftable <- con
ftable <- ftable/150
colfreq <- colsum/150
rowfreq <- rowsum/150
etable <- con
for (i in 1:3){
for (j in 1:4){
etable[i,j] <- rowfreq[i]*colfreq[j]
}
}
pertable <- con
for (i in 1:3){
for (j in 1:4){
pertable[i,j] <- (ftable[i,j]-etable[i,j])^2/etable[i,j]
}
}
c(pertable[1,],pertable[2,],pertable[3,])
round(c(pertable[1,],pertable[2,],pertable[3,]),4)
round(c(pertable[1,],pertable[2,],pertable[3,]),3)
round(c(qtable[1,],qtable[2,],qtable[3,]),3)
round(qtable,3)
round(pertable,3)
iris <- read.table(file.choose())
names(iris)
iris$count <- 1
iris$group <- 1
summary(iris$V4)
boundary <- c(0.1,0.5,1.5,2,2.5)
iris$group[iris$V4 <= boundary[1]] <- 1
iris$group[(iris$V4 > boundary[1])&(iris$V4 <= boundary[2])] <- 2
iris$group[(iris$V4 > boundary[2])&(iris$V4 <= boundary[3])] <- 3
iris$group[(iris$V4 > boundary[3])&(iris$V4 <= boundary[4])] <- 4
con <-table(iris$V5, iris$group)
colsum <- colSums(con)
rowsum <- rowSums(con)
ptable <- con
for (i in 1:4){
ptable[,i] <- con[,i]/colsum[i]
}
ptable
qtable <- con
for (i in 1:3){
qtable[i,] <- (ptable[i,]-rowsum[i])/rowsum[i]
}
round(qtable,3)
ftable <- con
ftable <- ftable/150
colfreq <- colsum/150
rowfreq <- rowsum/150
etable <- con
for (i in 1:3){
for (j in 1:4){
etable[i,j] <- rowfreq[i]*colfreq[j]
}
}
pertable <- con
for (i in 1:3){
for (j in 1:4){
pertable[i,j] <- (ftable[i,j]-etable[i,j])^2/etable[i,j]
}
}
round(pertable,3)
round(qtable,3)
round(pertable,3)
x <- c(80,90,90,90,80)
std(x)
sd(x)
mean(x)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(galton)
par(mfrow=c(1,2))
hist(galton$child, col = "blue", breaks = 100)
hist(galton$parent, col = "blue", breaks = 100)
par(mfrow=c(1,2))
hist(galton$child, col = "blue", breaks = 100)
hist(galton$parent, col = "blue", breaks = 100)
par(mfrow=c(1,2))
hist(galton$child, col = blue, breaks = 100)
hist(galton$parent, col = blue , breaks = 100)
hist(galton$child, col = B, breaks = 100)
par(mfrow=c(1,2))
hist(galton$child, col = "Blue", breaks = 100)
hist(galton$parent, col = "Blue" , breaks = 100)
par(mfrow=c(1,2))
hist(galton$child, col = "blue", breaks = 100)
hist(galton$parent, col = "blue" , breaks = 100)
par(mfrow=c(1,2))
hist(galton$child, col = "blue", breaks = 100)
hist(galton$parent, col = "blue" , breaks = 100)
library(manipulate)
library(manipulate)
myHIst <- function(mu){
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu,mu),c(0,150),col="red",lwd =5)
mse <- mean((galton$child - mu)^2)
text(63,150,paste("mu = ",mu))
text(63,140,paste("MSE = ",round(mse, 2)))
}
manipulate(myHist(mu),mu = slider(62,74,step = 0.5))
myHIst <- function(mu){
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu,mu),c(0,150),col="red",lwd =5)
mse <- mean((galton$child - mu)^2)
text(63,150,paste("mu = ",mu))
text(63,140,paste("MSE = ",round(mse, 2)))
}
manipulate(myHist(mu),mu = slider(62,74,step = 0.5))
myHist <- function(mu){
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu,mu),c(0,150),col="red",lwd =5)
mse <- mean((galton$child - mu)^2)
text(63,150,paste("mu = ",mu))
text(63,140,paste("MSE = ",round(mse, 2)))
}
manipulate(myHist(mu),mu = slider(62,74,step = 0.5))
myHist <- function(mu){
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu,mu),c(0,150),col="red",lwd =5)
mse <- mean((galton$child - mu)^2)
text(63,150,paste("mu = ",mu))
text(63,140,paste("MSE = ",round(mse, 2)))
}
manipulate(myHist(mu),mu = slider(62,74,step = 0.5))
mean(galton$child)
hist(galton$child, col = "blue",breaks = 100)
meanChild <- mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length = 100), col = "red", lwd = 5)
plot(galton$parent, galton$child, pch = 19, col = "blue")
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
table(x, y)
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
table(x, y)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .10 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
x <- c(0.18, -1.54, 0.42, 0.95)
x <- c(0.18,0.18, -1.54, 0.42, 0.42, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(y)~ I(x) - 1)
data(mtcars)
str(mtcars)
lm(mpg~weight, data=mtcars)
lm(mtcars$mpg~mtcars$weight)
View(mtcars)
lm(mpg~wt, data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(y~x)
lm(x~y)
-1.713*-0.04462
cor(x,y)
var(x)
var(y)/var(x)
-1.713/-0.04462
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
fit <- lm(y~x)
FIT
fit
coef(fit)
coef(fit)[1]
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
b0+b1*x
y-b0+b1*x
sd(y-b0+b1*x)
pred <- predict(fit, x)
pred <- predict(fit, newdata = x)
fit
predict(fit, x)
x
y
x
lm(y~x)
0.1885+0.7224*x
0.1885+0.7224*x-y
sd(0.1885+0.7224*x-y)
sd(y-(0.1885+0.7224*x))
y-(0.1885+0.7224*x)
sd(y-(0.1885+0.7224*x))
fit <- lm(y~x)
e <- resid(fit)
sd(e)
length(x)
1/7*sum(e^2)
sqrt(1/7*sum(e^2))
sum(e)
x = x/100
lm(y~x)
data(mtcars)
fit <- lm(mpg~wt,data = mtcars)
y<-mtcars$mpg
x<-mtcars$wt
fit <- lm(y~x)
fit
fit <- lm(mpg~wt,data = mtcars)
fit
fit <- lm(y~x)
summary(fit)
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit <- lm(y~x)
fit
summary(fit)
sd(y)
sd(y)^2
sd(y)^2/(sum(x-mean(x)))^2
x-mean(x)
sd(y)^2/(sum((x-mean(x))^2)
)
sd(y)^2/(sum((x-mean(x))^2)))
summary(fit)
sd(y)^2/(sum((x-mean(x))^2)))
sd(y)^2/(sum((x-mean(x))^2))
View(mtcars)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y- beta0 -beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
e <- y- beta0 -beta1*x
e
sigma <- sqrt(sum(e^2)/(n-2))
sum(e^2)/(n-2)
n
n <- length(y)
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
seBeta0 <- (1/n + mean(x)^2 /ssx)^.5*sigma
seBeta1 <- sigma/sqrt(ssx)
seBeta0
seBeta1
tBeta0 <- beta0/seBeta0
tBeta1 <- beta1/seBeta1
pBeta0 <- 2*pt(abs(tBeta0), df = n-2, lower.tail = F)
pBeta1 <- 2*pt(abs(tBeta1), df = n-2, lower.tail = F)
pBeta0
pBeta1
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
coefTable
colnames(coefTable) <- c("Estimate", "Std.Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)","X")
summary(fit)
coefTable
z = x + 2
fit2 <- lm(y~z)
summary(fit2)
summary(fit1)
summary(fit)
summary(fit2)
37.2851 - 2*-5.3445
predict(fit, x)
fit$predict
names(fit)
fit$fitted.values
y
(y - fit$fitted.values )^2
sum((y - fit$fitted.values )^2)
coef(fit)
sum((y - 7.285126)^2)
sum((y - 7.285126)^2)/sum((y - fit$fitted.values )^2)
sum((y - 37.285126)^2)sum((y - fit$fitted.values )^2)
sum((y - 37.285126)^2)/sum((y - fit$fitted.values )^2)
sum((y - mean(y))^2)/sum((y - fit$fitted.values )^2)
sumCoef[1,1]+c(-1,1)*qt(0.975, df = fit$df)*sumCoef[1,2]
sumCoef <- summary(fit)$coefficients
sumCoef[1,1]+c(-1,1)*qt(0.975, df = fit$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(0.975, df = fit$df)*sumCoef[2,2]
z <- x/2
x
z
fit6 <- lm(y~z)
sumCoef <- summary(fit6)$coefficients
sumCoef[1,1]+c(-1,1)*qt(0.975, df = fit$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(0.975, df = fit$df)*sumCoef[2,2]
p1 <- predict(fit, newdata = x, interval = ("confidence"))
new <- as.data.frame(cbind(x,y))
p1 <- predict(fit, newdata = new, interval = ("confidence"))
p1
new <- as.data.frame(cbind(c(mean(x),3),c(0,0)))
p1 <- predict(fit, newdata = new, interval = ("confidence"))
p1
new <- as.data.frame(cbind(c(mean(x),3),c(0,0)))
new
p1 <- predict(fit, newdata = new, interval = ("confidence"))
p1
p2 <- predict(fit, newdata = new, interval = ("predict"))
p1 <- predict(fit, newdata = new, interval = ("confidence"))
new <- as.data.frame(cbind(c(mean(x),3),c(0,0)))
p1 <- predict(fit, newdata = new, interval = ("confidence"))
p2 <- predict(fit, newdata = new, interval = ("predict"))
View(new)
x
names(new) <- c("x","y")
new
p1 <- predict(fit, newdata = new, interval = ("confidence"))
p2 <- predict(fit, newdata = new, interval = ("predict"))
p1
p2
lm(y~x)
lm(y~x/100)
x1 <- x/100
x1
lm(y~x1)
setwd("D:/Study/On Going/JH Data Science/09 Developing Data Products/slidify project")
library(slidify)
publish(user="ryancheunggit", repo = "datasciencecoursera/09 Developing Data Products/")
publish(user="ryancheunggit", repo = "SlidifyProject")
