```{r}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
install.packages("slidify")
install.packages("slidify")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1,2,3,4)
makeVector(x)
makeVector()
x
get
set
getmean
setmean
x$getmean()
cachemean(x)
cachemean(x, makeVector)
cachemean(x, makeVector())
setwd("D:/Study/On Going/JH Data Science/datasciencecoursera-repo/datasciencecoursera")
source("cachematrix.R")
x <- matrix(1:40,8,5)
x
makeCacheMatrix(x)
cacheSolve(x)
z <- x
z
x <- makeCacheMatrix(z)
x
invz <- cacheSolve(x)
invz <- cacheSolve(z)
x
z
invz <- cacheSolve(x)
invz <- cacheSolve(x)
x
exists(x)
exist(x)
exists("x")
x <- matrix(1:40,5,8)
x
class(x)
class(x) == "matrix"
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
x
makeCacheMatrix(x)
x <- matrix(1:25,5,5)
makeCacheMatrix(x)
solve(x)
x <- matrix(1:6,2,3)
x
solve(x)
x <- matrix(1:4,2,2)
solve(x)
x
solve(x)
source("cachematrix2.R")
x
solve(x)
makeCacheMatrix(x)
x
x$getinverse()
invx
x$getinverse()
d <- function(x){ c <- function(){x <<-2} return(x)}
d <- function(x){
c <- function(){x <<-2}
c()
return(x)}
d(3)
d(4)
source("cachemean.R")
p <- c(1:5)
p
makeVector(p)
cachemean(p)
source("cachematrix.R")
x
makeCacheMatrix(x)
cx
cinvx
cacheSolve(x)
cacheSolve(matrix(1:4,2,2))
source("cachematrix.R")
makeCacheMatrix(X1)
x1 <- matrix(1:9,3,3)
X2 <- matrix(1:9,3,3)
X3 <- matrix(2:10,3,3)
makeCacheMatrix(X1)
X1 <- matrix(1:9,3,3)
makeCacheMatrix(X1)
X1
solve(X1)
solve(x3)
X3 <- matrix(2:10,3,3)
x3
x3
X3
solve(X3)
X1 <- matrix(1:4,2,2)
X2 <- matrix(1:4,2,2)
X3 <- matrix(2:5,2,2)
makeCacheMatrix(X1)
cacheSolve(X1)
cacheSolve(X2)
cacheSolve(X3)
cacheSolve(X3)
source("cachematrix.R")
makeCacheMatrix(X1)
cacheSolve(X1)
cacheSolve(X2)
cacheSolve(X3)
cacheSolve(matrix(1:4,2,2))
cacheSolve(c(1,2,3,4))
